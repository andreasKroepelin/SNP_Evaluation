/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snpevaluation;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 *
 * @author guestmpi
 */
public class DotplotPanel extends javax.swing.JPanel {

    BufferedImage content;
    double m1Max;
    double m2Max;
    int dotRadius = 3;
    int leftMarg = 20;
    int topMarg = 20;
    int mouseX;
    int mouseY;
    CorrelationsDialog parent;

    /**
     * Creates new form DotplotPanel
     */
    public DotplotPanel(CorrelationsDialog parent) {
        initComponents();

        this.parent = parent;
        content = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);

        mouseX = leftMarg;
        mouseY = topMarg;
    }

    public void drawDotplot(double[][] datasM1, double[][] datasM2, int m1, int m2, String[] mNames) {
        content = new BufferedImage(500, 500, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = content.createGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, content.getWidth(), content.getHeight());

        m1Max = 0;
        m2Max = 0;

        for (int k = 0; k < datasM1.length; k++) {
            if (datasM1[k] != null) {
                for (int i = 0; i < datasM1[k].length; i++) {
                    if (datasM1[k][i] > m1Max) {
                        m1Max = datasM1[k][i];
                    }
                    if (datasM2[k][i] > m2Max) {
                        m2Max = datasM2[k][i];
                    }
                }
            }
        }

        g.setColor(Color.BLACK);

        g.drawLine(leftMarg, topMarg, content.getWidth() - leftMarg, topMarg); //x axis line
        g.drawLine(content.getWidth() - leftMarg - 5, topMarg - 3, content.getWidth() - leftMarg, topMarg); //top half x axis arrow
        g.drawLine(content.getWidth() - leftMarg - 5, topMarg + 3, content.getWidth() - leftMarg, topMarg); //bootom half x axis arrow
        g.drawString(mNames[m1], content.getWidth() - leftMarg - g.getFontMetrics().stringWidth(mNames[m1]) - 10, topMarg - 1); //x axis label

        g.drawLine(leftMarg, topMarg, leftMarg, content.getHeight() - topMarg); //y axis line
        g.drawLine(leftMarg - 3, content.getHeight() - topMarg - 5, leftMarg, content.getHeight() - topMarg); //left half y axis arrow
        g.drawLine(leftMarg + 3, content.getHeight() - topMarg - 5, leftMarg, content.getHeight() - topMarg); //right half y axis arrow
        drawRotatetString(g, leftMarg - g.getFontMetrics().getHeight() - 1, content.getHeight() - topMarg - g.getFontMetrics().stringWidth(mNames[m2]) - 10, Math.PI / 2.0, mNames[m2]); //y axis label

        for (int k = 0; k < datasM1.length; k++) {
            if (datasM1[k] != null) {
                g.setColor(kthColor(k, datasM1.length));
                for (int i = 0; i < datasM1[k].length; i++) {
                    int x = (int) ((datasM1[k][i] / m1Max) * (content.getWidth() - 2 * leftMarg) + leftMarg);
                    int y = (int) ((datasM2[k][i] / m2Max) * (content.getHeight() - 2 * topMarg) + topMarg);
                    g.fillOval(x - dotRadius, y - dotRadius / 2, 2 * dotRadius, 2 * dotRadius);
                }
            }
        }

        Dimension dim = new Dimension(content.getWidth(), content.getHeight());
        setPreferredSize(dim);
        setSize(dim);
        revalidate();
    }

    @Override
    public void paintComponent(Graphics g) {
        g.drawImage(content, 0, 0, null);

        g.setColor(Color.LIGHT_GRAY);
        g.drawLine(leftMarg, mouseY, content.getWidth() - leftMarg, mouseY);
        g.drawLine(mouseX, topMarg, mouseX, content.getHeight() - topMarg);
    }

    private static void drawRotatetString(Graphics2D g, int x, int y, double ang, String text) {
        g.translate((double) x, (double) y);
        g.rotate(ang);
        g.drawString(text, 0, 0);
        g.rotate(-ang);
        g.translate((double) (-x), (double) (-y));
    }

    private static Color kthColor(int k, int l) {
        return Color.getHSBColor(((float) k) / ((float) l), 1, 1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if (leftMarg <= evt.getX() && evt.getX() <= content.getWidth() - leftMarg && topMarg <= evt.getY() && evt.getY() <= content.getHeight() - topMarg) {

            mouseX = evt.getX();
            mouseY = evt.getY();

            double x = mouseX;
            double y = mouseY;

            double m1 = (x - leftMarg) / ((double) (content.getWidth() - 2 * leftMarg)) * m1Max;
            double m2 = (y - topMarg) / ((double) (content.getHeight() - 2 * topMarg)) * m2Max;

            parent.writeDotPlotPosition(m1, m2);

            parent.revalidate();
            parent.repaint();
        }
    }//GEN-LAST:event_formMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
