/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snpevaluation;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author kroepelin
 */
public class TabContentDialog extends javax.swing.JDialog {

    private Surface parent;
    private ArrayList<Integer> positions;
    private ArrayList<String> chroms;
    private SNPTable newSNPTable;
    private String sample;
    private String[] samplesSorted;

    /**
     * Creates new form TabContentDialog
     */
    public TabContentDialog(Surface parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.parent = parent;
        this.positions = new ArrayList<>();
        this.chroms = new ArrayList<>();
        this.newSNPTable = null;
        this.samplesSorted = Arrays.copyOf(parent.snptable.samples, parent.snptable.samples.length);
        Arrays.sort(this.samplesSorted);
        list.setListData(this.samplesSorted);
        sample = "";
        setVisible(true);
    }

    public SNPTable getNewSNPTable() {
        return newSNPTable;
    }

    public String getTabName() {
        return nameTf.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okB = new javax.swing.JButton();
        typeCB = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        loadB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nameTf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Tab");

        okB.setText("OK");
        okB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBActionPerformed(evt);
            }
        });

        typeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "unique SNPs of...", "shared SNPs of...", "all SNPs of...", "complete SNP Table", "positions..." }));
        typeCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeCBItemStateChanged(evt);
            }
        });

        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        loadB.setText("Load from file...");
        loadB.setEnabled(false);
        loadB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBActionPerformed(evt);
            }
        });

        jLabel1.setText("Name:");

        nameTf.setColumns(20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(okB))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(typeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 98, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okB)
                    .addComponent(loadB))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typeCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeCBItemStateChanged
        if (typeCB.getSelectedIndex() < 3) {
            list.setListData(this.samplesSorted);
            if (typeCB.getSelectedIndex() == 0) {
                nameTf.setText("unique " + sample);
            } else if (typeCB.getSelectedIndex() == 1) {
                nameTf.setText("shared " + sample);
            } else {
                nameTf.setText("all " + sample);
            }
            loadB.setEnabled(false);
        } else if (typeCB.getSelectedIndex() == 3) {
            loadB.setEnabled(false);
            list.setListData(new String[0]);
            nameTf.setText("SNP Table");
        } else {
            ArrayList<String> positionsS = new ArrayList<>();
            positions.stream().map(i -> String.valueOf(i)).forEachOrdered(positionsS::add);
            for (int i = 0; i < chroms.size(); i++) {
                positionsS.set(i, positionsS.get(i) + chroms.get(i));
            }
            list.setListData(positionsS.toArray(new String[0]));
            loadB.setEnabled(true);
            nameTf.setText("");
        }
    }//GEN-LAST:event_typeCBItemStateChanged

    private void loadBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBActionPerformed
        JFileChooser fc = new JFileChooser(SNPEvaluation.getDefaultPath());
        fc.setDialogTitle("Load Positions");
        fc.addChoosableFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".txt");
            }

            @Override
            public String getDescription() {
                return "text files";
            }
        });
        fc.setAcceptAllFileFilterUsed(false);

        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedReader read = new BufferedReader(new FileReader(fc.getSelectedFile()));
                positions = new ArrayList<>();
                String line;
                while ((line = read.readLine()) != null) {
                    positions.add(Integer.parseInt(line));
                }
                read.close();
                positions.sort(Comparator.naturalOrder());
                ArrayList<String> positionsS = new ArrayList<>();
                positions.stream().map(i -> String.valueOf(i)).forEachOrdered(positionsS::add);
                list.setListData(positionsS.toArray(new String[0]));

                SNPEvaluation.setDefaultPath(fc.getSelectedFile().getParent());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error.\n\n" + e.getClass().getName() + " " + e.getMessage() + "\n" + SNPEvaluation.stackTraceString(e), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_loadBActionPerformed

    private void okBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBActionPerformed
        try {
            if (typeCB.getSelectedIndex() == 0) {
                newSNPTable = parent.snptable.filterForUniqueSNPsIn(list.getSelectedValue());
            } else if (typeCB.getSelectedIndex() == 1) {
                newSNPTable = parent.snptable.filterForSharedSNPsIn(list.getSelectedValue());
            } else if (typeCB.getSelectedIndex() == 2) {
                newSNPTable = parent.snptable.filterForSNPsIn(list.getSelectedValue());
            } else if (typeCB.getSelectedIndex() == 3) {
                newSNPTable = parent.snptable;
            } else {
                newSNPTable = new SNPTable(parent.snptable.samples, new ArrayList<>());
                for (int p : positions) {
                    SNPTableEntry entry = parent.snptable.getAtPos(p);
                    //newSNPTable.entries.add(entry != null ? entry : new SNPTableEntry(p, ""));
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error.\n\n" + e.getClass().getName() + " " + e.getMessage() + "\n" + SNPEvaluation.stackTraceString(e), "Error", JOptionPane.ERROR_MESSAGE);
        }
        dispose();

    }//GEN-LAST:event_okBActionPerformed

    private void listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listValueChanged
        if (typeCB.getSelectedIndex() < 3) {
            sample = list.getSelectedValue();
            if (typeCB.getSelectedIndex() == 0) {
                nameTf.setText("unique " + sample);
            } else if (typeCB.getSelectedIndex() == 1) {
                nameTf.setText("shared " + sample);
            } else {
                nameTf.setText("all " + sample);
            }
        }
    }//GEN-LAST:event_listValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list;
    private javax.swing.JButton loadB;
    private javax.swing.JTextField nameTf;
    private javax.swing.JButton okB;
    private javax.swing.JComboBox<String> typeCB;
    // End of variables declaration//GEN-END:variables
}
